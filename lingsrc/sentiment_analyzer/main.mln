////////////////
// Inclusions //
////////////////
#include "lingsrc/sentiment_analyzer/types.mln"
#include "lingsrc/sentiment_analyzer/predicates.mln"

//////////////////////
// Hard Constraints //
//////////////////////

// if a word belongs to a markable, all markable's attributes should also be present
isSentiment(w, s) => (hasSentimentPolarity(s, p) ^ hasSentimentIntensity(s, i) ^ hasSentimentSarcasm(s, b)).

isSource(w, s) => hasSourceAnaphref(s, a).
isTarget(w, t) => (hasTargetAnaphref(t, a) ^ hasTargetPreference(t, p)).

isEmoexpression(w, e) => (hasEmoexpressionPolarity(e, p) ^ hasEmoexpressionIntensity(e, i) ^ hasEmoexpressionSarcasm(e, b)).

isIntensifier(w_id, int_id) => hasIntensifierDegree(int_id, deg).
// an intensifier can't be a diminisher and vice versa
isIntensifier(w_id, int_id) => !isDiminisher(w_id, dim_id)

isDiminisher(w, dim) => hasDiminisherDegree(dim, deg)
isDiminisher(w_id, dim_id) => !isIntensifier(w_id, int_id)

//////////////
// Formulas //
//////////////

/// Basic Grammar

// tag depends on word
Form(w_id, form) ^ Tag(w_id, t)
// connector depends on tags
Connector(prnt_id, chld_id, cnct) ^ Tag(prnt_id, +prnt_t) ^ Tag(chld_id, +chld_t)
// case, number, mood and gender depend on tags and form
Tag(w_id, +t) => hasCase(w_id, +c)
Tag(w_id, +t) => hasNumber(w_id, +n)
Tag(w_id, +t) => hasGender(w_id, +g)
Tag(w_id, +t) => hasMood(w_id, +g)

/// Sentiment Level
#include "lingsrc/sentiment_analyzer/sentiment.mln"

/// Target Level
#include "lingsrc/sentiment_analyzer/target.mln"

/// Source Level
#include "lingsrc/sentiment_analyzer/source.mln"

/// Emo-Expression Level
#include "lingsrc/sentiment_analyzer/emo-expression.mln"

/// Intensifier Level

// whether a word is an intensifier or not, primarily depends on the word and its tag
Lemma(w_id, lemma) ^ Tag(w_id, t) => isIntensifier(w_id, int_id)

/// Diminisher Level
Lemma(w_id, lemma) ^ Tag(w_id, t) => isDiminisher(w_id, dim_id)
Lemma(w_id, lemma) ^ isDiminisher(w_id, dim_id) => hasDiminisherDegree(dim_id, deg)

/// Negation Level
Tag(w_id, +t) => isNegation(w_id, neg_id)
