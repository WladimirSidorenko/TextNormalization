#!/usr/bin/env runawk

##################################################################

#use "power_getopt.awk"
#use "alt_assert.awk"
#use "sort.awk"

##################################################################
#.begin-str help
# Compare tagging of 2 different taggers and print statistics.
#
# USAGE:
# script [input_file(s)]
#
# OPTIONS:
# -h|--help	print this screen and exit
#.end-str
##################################################################

function latex_escape(istring) {
    gsub(/[$#]/, "\\\\&", istring)
    return istring
}

function reverse(arr,
		 i, lngth, mid, counterpart, tmp_el) {
    lngth = length(arr) + 1
    mid = int(lngth/2)
    for ( i=1 ; i < mid; ++i) {
	counterpart = lngth - i
	tmp_el = arr[i]
	arr[i] = arr[counterpart]
	arr[counterpart] = tmp_el
    }
}

function get_wt(itoken, trg_arr) {
    # trg_arr[1] will contain word if any
    # trg_arr[2] will contain tag if any
    delete trg_arr
    return match(itoken, /^[[:space:]]*([^[:space:]]+)_([^_[:space:]]+)[[:space:]]*$/, trg_arr)
}

function update_stat(stat_hsh, istring, \
		     istring_arr, cnt, i, token_arr, \
		     sign, wt_arr, word, tag, hsh_cnt) {
    cnt = split(istring, istring_arr, /[[:space:]]+/)
    for (i = 1; i <= cnt; ++i) {
	if (match(istring_arr[i], /^([-+=]?)<<(.+)>>$/, token_arr)) {
	    sign = token_arr[1]
	    assert( get_wt(token_arr[2], wt_arr), \
		   "Wrong input token format: " istring_arr[i], 1)
	    word = wt_arr[1]
	    tag = wt_arr[2]
	    stat_hsh[++hsh_cnt SUBSEP 1] = sign
	    stat_hsh[hsh_cnt SUBSEP 2] = word
	    stat_hsh[hsh_cnt SUBSEP 3] = tag
	} else {
	    assert( get_wt(istring_arr[i], wt_arr), \
		    "Untagged word \x27" istring_arr[i] "\x27 at position " i, 2)
	}
	++total_tokens
    }
    delete istring_arr
    delete token_arr
    delete wt_arr
    return hsh_cnt
}

function analyze_stat( \
    i, tree_sign, tnt_sign, tree_word, tnt_word, tree_tag, tnt_tag) {
    assert(tree_cnt == tnt_cnt, "Different number of changes detected " \
	   tree_cnt " vs. " tnt_cnt, 3)
    # no changes detected
    if ( ! tree_cnt )
	return

    total_changes += tree_cnt
    # iterate over changes
    for (i=1; i <= tree_cnt; ++i) {
	tree_sign = tree_tagger[i SUBSEP 1]
	tnt_sign = tnt_tagger[i SUBSEP 1]

	tree_word = tree_tagger[i SUBSEP 2]
	tnt_word = tnt_tagger[i SUBSEP 2]

	tree_tag = tree_tagger[i SUBSEP 3]
	tnt_tag = tnt_tagger[i SUBSEP 3]

	# perform some sanity check
	assert(tree_sign || tnt_sign, "Unresolved change " tree_sign " vs. " tnt_sign " : "\
	      tree_word "_" tree_tag " vs. " tnt_word "_" tnt_tag, 4)
	assert(tree_word == tnt_word, "Different words correspond to change " i ": " \
	      tree_word " vs. " tnt_word, 5)

	if (tree_sign != "-" && tree_sign != "=" && (!tnt_sign || tnt_sign == "-")) {
	    ++total_pos_tree
	    ++pos_tree[latex_escape(tree_tag) " & " latex_escape(tnt_tag)]
	} else if (tnt_sign != "-" && tnt_sign != "=" && (!tree_sign || tree_sign == "-")) {
	    ++total_pos_tnt
	    ++pos_tnt[latex_escape(tnt_tag) " & " latex_escape(tree_tag)]
	} else {
	    ++equal_changes
	}
    }
    # clean-up
    delete tree_tagger
    delete tnt_tagger
    tree_cnt = tnt_cnt = 0
}

function print_stat( \
    pos_tree_remap, pos_tnt_remap, i) {
    print "%% This is an automatically generated document. Do not edit."
    print "\\begin{tabular}{|*{6}{p{0.15\\textwidth}|}}\\hline"
    print "\\multicolumn{6}{|c|}{Tagger Comparison}\\\\\\hline\\hline"
    print "\\multicolumn{3}{|c|}{Tree Tagger}&\\multicolumn{3}{c|}{TNT Tagger}\\\\\\hline"
    print "Chosen Better Tag&Opposite Worse Tag & \\# of Cases & Chosen Better Tag & Opposite Worse Tag & \\# of Cases\\\\\\hline"

    # sort changes in hashes pos_tree and pos_tnt and output
    # statistics
    sort_values(pos_tree, pos_tree_remap)
    reverse(pos_tree_remap)
    sort_values(pos_tnt, pos_tnt_remap)
    reverse(pos_tnt_remap)

    for (i = 1; ((i in pos_tree_remap) || (i in pos_tnt_remap)) && \
	     i <= ERRORS_HEAD; ++i) {
	printf "%s & %d & %s & %d\\\\\n", \
	    pos_tree_remap[i], pos_tree[pos_tree_remap[i]], \
	    pos_tnt_remap[i], pos_tnt[pos_tnt_remap[i]]
    }

    print "... & ... & ... & ... & ... & ...\\\\\n"
    printf "\\multicolumn{2}{|c|}{Total better choices:} & \\textbf{%d} & \\multicolumn{2}{|c|}{Total better choices:} & \\textbf{%d}\\\\\\hline\\hline\n", total_pos_tree, total_pos_tnt
    printf "\\multicolumn{5}{|l|}{Differences found:}& \\textbf{%d}\\newline \\small{(%.2f\\%% of tokens)}\\\\\\hline\n", \
	total_changes, ( total_changes / ( total_tokens / 2 ) ) * 100
    printf "\\multicolumn{5}{|l|}{Differences considered irrelevant:}& \\textbf{%d}\\\\\\hline\n", equal_changes
    printf "\\multicolumn{5}{|l|}{Sentences tested:}& \\textbf{%d}\\\\\\hline\n", analyzed_sentences
    print "\\end{tabular}"
}

##################################################################
BEGIN {
    FS = "\t"
    ERRORS_HEAD = 10
    tree_tagger_cnt = tnt_tagger_cnt = 0
}

# restore UNICODE chars
1 {
    gsub(/€/, "EUR")
    gsub(/[”“]/, "\"")
    gsub(/💩/, "?")
    gsub(/—/, "--")
    gsub(/–/, "-")
    gsub(/…/, "...")
    gsub(/„/, ",,")
}

/^[[:space:]]*tree_tagger_output/ {
    tree_cnt = update_stat(tree_tagger, $2)
    next
}

/^[[:space:]]*tnt_tagger_output/ {
    tnt_cnt = update_stat(tnt_tagger, $2)
    next
}

/^Original:/ {
    ++analyzed_sentences
}

!NF {
    analyze_stat()
}

END {
    analyze_stat()
    print_stat()
}
