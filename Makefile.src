# -*- mode: makefile; -*-

#############
# Variables #
#############
# directories
SRC_ROOT_DIR := ${SOCMEDIA_ROOT}/src

SRC_DIRS := $(shell find $(SRC_ROOT_DIR) -type d ! -name '.*')
HDR_DIRS := ${SRC_DIRS}
OBJ_DIR  := ${TMP_DIR}
DEP_DIR  := ${TMP_DIR}/dep
BIN_DIR  := ${SOCMEDIA_BIN}
DOC_DIR  := ${SOCMEDIA_ROOT}/doc

# directories for storing dependencies and documentation will be created
# automatically
DIR_LIST += ${DEP_DIR} ${DOC_DIR}

# documentation will be created by default
MAKE_DOC   ?= 1

# file suffixes
HDR_SFX := .h
DEP_SFX := .d
OBJ_SFX := .o
SRC_SFX := .cpp
STLIB_SFX := .a
SHLIB_SFX := .so

# paths and files for library
LIB_SENTOOLS := sentools
STLIB_SENTOOLS := $(BIN_DIR)/$(LIB_SENTOOLS)$(STLIB_SFX)
SHLIB_SENTOOLS := $(BIN_DIR)/$(LIB_SENTOOLS)$(SHLIB_SFX)
LIB_SENTOOLS_DIR  := ${SRC_ROOT_DIR}/${LIB_SENTOOLS}
LIB_SENTOOLS_SRC  := $(shell find $(LIB_SENTOOLS_DIR) -type f -name '*$(SRC_SFX)')
LIB_SENTOOLS_OBJ  := $(patsubst $(LIB_SENTOOLS_DIR)/%$(SRC_SFX),$(OBJ_DIR)/%$(OBJ_SFX),\
$(LIB_SENTOOLS_SRC))

LIB_UTILS := utils
STLIB_UTILS := $(BIN_DIR)/$(LIB_UTILS)$(STLIB_SFX)
SHLIB_UTILS := $(BIN_DIR)/$(LIB_UTILS)$(SHLIB_SFX)
LIB_UTILS_DIR  := ${SRC_ROOT_DIR}/${LIB_UTILS}
LIB_UTILS_SRC  := $(shell find $(LIB_UTILS_DIR) -type f -name '*$(SRC_SFX)')
LIB_UTILS_OBJ  := $(patsubst $(LIB_UTILS_DIR)/%$(SRC_SFX),$(OBJ_DIR)/%$(OBJ_SFX),\
$(LIB_UTILS_SRC))

LIB_OBJ := ${LIB_UTILS_OBJ} ${LIB_SENTOOLS_OBJ}

STLIBS := $(STLIB_SENTOOLS) $(STLIB_UTILS)
SHLIBS := $(SHLIB_SENTOOLS) $(SHLIB_UTILS)

TRG_LIBS ?= ${SHLIBS}

# variables related to compilation
CXX      := g++-4.7
CPPFLAGS += -std=c++11 $(addprefix -I,$(HDR_DIRS))
CXXFLAGS += -Wall
LDFLAGS  += -L/usr/include $(addprefix -L,$(dir $(TRG_LIBS)))
LDLIBS   += $(addprefix -l,$(notdir $(LIB_SENTOOLS) $(LIB_UTILS)))

# search paths for header and source files
vpath %${HDR_SFX} ${HDR_DIRS}
vpath %${SRC_SFX} ${SRC_DIRS}
vpath %${OBJ_SFX} ${OBJ_DIR}

# list of compiled executables
BIN_FILES := socmedia misspelling_restorer
# list of objective files for binaries
OBJ_FILES := $(addsuffix $(OBJ_SFX),$(addprefix $(OBJ_DIR)/,$(BIN_FILES)))
# list of files with automatic dependencies
DEP_FILES := $(addsuffix $(DEP_SFX),$(addprefix $(DEP_DIR)/,$(BIN_FILES) \
		$(notdir $(basename $(LIB_SRC)))))
# prepend directory to the list of binary files
BIN_FILES := $(addprefix $(BIN_DIR)/,$(BIN_FILES))

###################
# Special Targets #
###################
.DELETE_ON_ERROR:

.SECONDARY:

.PHONY: src doc dep \
	clean_src clean_doc clean_dep

####################
# Specific Targets #
####################
# all_src
all_src: dep doc src

# clean_all_src
clean_all_src: clean_dep clean_doc clean_src

# comple executables and libraries
src: ${BIN_FILES}

# clean_src does not remove dependencies
clean_src:
	-rm -f $(wildcard $(OBJ_DIR)/*$(OBJ_SFX)) \
	$(wildcard $(BIN_DIR)/*)

###########
# help_src
help_src:
	-@echo -e "### C++ Sources ###\n\
	all_src   - build C++ sources, documentation, and dependencies\n\
	src       - build dependencies and compile C++ sources\n\
	dep       - automatically create Makefile with dependencies for obj files\n\
	doc       - compile documentation for C++ source code\n\
	\n\
	clean_all_src  - remove compiled C++ sources, dependencies and documentation\n\
	clean_src  - remove compiled C++ sources, dependencies and object files\n\
	clean_doc - delete compiled source documentation\n\
	clean_dep - delete automatically created Makefiles\n" >&2

######################################################
# doc (all neccessary rules are provided in Doxyfile)
doc: ${SOCMEDIA_ROOT}/Doxyfile ${SRC_FILES}
ifeq "${MAKE_DOC}" "1"
	doxygen $<
endif

clean_doc:
	-rm -rf ${DOC_DIR}/*

#########################
# automatic dependencies
dep: ${DEP_FILES}

${DEP_FILES}: ${DEP_DIR}/%${DEP_SFX}: %${SRC_SFX} | ${DEP_DIR}
	@set -e; \
	rm -f $@; \
        ${CXX} -MM ${CPPFLAGS} $< > $@.$$$$; \
        sed 's,\($*\)\.o[ :]*,${TMP_DIR}/\1.o $@ : ,g' < $@.$$$$ > $@.tmp && \
        mv $@.tmp $@ ; rm -f $@.$$$$

-include ${DEP_FILES}

clean_dep:
	-rm -f ${DEP_FILES}

###############
# library
${STLIB_UTILS} ${SHLIB_UTILS}: ${LIB_UTILS_OBJ}
${STLIB_SENTOOLS} ${SHLIB_SENTOOLS}: ${LIB_SENTOOLS_OBJ}

${STLIBS}:
	set -e; \
	${AR} ${ARFLAGS} "$@" $^

${SHLIBS}:
	set -e; \
	${CXX} -Wl,-soname,$(notdir $@) $^ -o $@

###############
# object files
${LIB_UTILS_OBJ}: ${OBJ_DIR}/%${OBJ_SFX}: ${LIB_UTILS_DIR}/%${SRC_SFX} | ${OBJ_DIR}
${LIB_SENTOOLS_OBJ}: ${OBJ_DIR}/%${OBJ_SFX}: ${LIB_SENTOOLS_DIR}/%${SRC_SFX} | ${OBJ_DIR}
${OBJ_FILES}: ${OBJ_DIR}/%${OBJ_SFX}: %${SRC_SFX} | ${OBJ_DIR}

${LIB_OBJ} ${OBJ_FILES}:
	${CXX} ${CPPFLAGS} ${CXXFLAGS} -fPIC  $< -c -o $@

################
# executable files (linkage)
${BIN_DIR}/misspelling_restorer: LDLIBS += -lhunspell-1.3

${BIN_FILES}: ${BIN_DIR}/%: ${OBJ_DIR}/%${OBJ_SFX} ${TRG_LIBS} | ${BIN_DIR}
	${CXX} ${CPPFLAGS} ${CXXFLAGS} -o $@ $(filter %$(OBJ_SFX),$^) ${LDFLAGS} ${LDLIBS}
