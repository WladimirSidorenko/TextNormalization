#!/usr/bin/env bash
# -*- mode: shell-script; -*-
set -e -o pipefail

##################################################################
# Variables
__cmd_prefix=''
__glob_opts=''

eos_tag="$(cat ${SOCMEDIA_LSRC}/sentence_splitter/eos.tag)"

##################################################################
# Functions
usage() {
    local name="$(basename $0)"
    cat <<EOF >&2
DESCRIPTION:
${name} performs pre-processing steps and tags input text data.

USAGE:
${name} [OPTIONS] [FILE(s)]

OPTIONS:
-h,--help    print this screen and exit
-f,--flush   flush output (be cautious, since TreeTagger doesn't
             support flushing, this option will only affect preceding
             modules but won't have any effect on the whole pipeline
             so far)
--no-lang-filter    don't filter messages by language
-s,--skip-line LINE    don't change input lines equal to LINE
EOF
    exit ${1:-1}
}

##################################################################
# Arguments
while test $# -gt 0; do
    case $1 in
	-h|--help)
	    usage 0;;
	-f|--flush)
	    __glob_opts="${__opts} ${1}";;
	-s|--skip-line)
	    if test $# -lt 2; then
		echo '-s,--skip-line requires an argument.' >&2
		exit 1
	    fi
	    __opts="${__opts} ${1} '${2}'"
	    # need `eval' to provide correct parsing of arguments
	    __cmd_prefix='eval'
	    shift;;
	-s*|--skip-line=*)
	    __glob_opts="${__opts} '${1}'"
	    __cmd_prefix='eval';;
	--no-lang-filter)
	    LF_OPTS="${LF_OPTS} ${1}";;
	--)
	    shift
	    break;;
	-)
	    break;;
	-*)
	    echo "Unrecognized option '$1'. Type --help to see usage." >&2
	    exit 2;;
	*)
	    break;;
    esac
    shift
done

##################################################################
# Main Pipeline

# ${__cmd_prefix} will be either empty or `eval'. We need `eval' in
# order to be able to correctly pass and parse the skip line argument
${__cmd_prefix} language_filter ${__glob_opts} ${LF_OPTS} -q $@ | \
    ${__cmd_prefix} tsv2xml  ${__glob_opts} | \
    ${__cmd_prefix} character_normalizer ${__glob_opts} | \
    ${__cmd_prefix} noise_cleaner ${__glob_opts} -x | \
    ${__cmd_prefix} umlaut_restorer ${__glob_opts} | \
    ${__cmd_prefix} slang_normalizer ${__glob_opts} | \
    ${__cmd_prefix} misspelling_restorer.py ${__glob_opts} | \
    ${__cmd_prefix} sentence_splitter ${__glob_opts} -x | \
    ${__cmd_prefix} tokenizer ${__glob_opts} -x -t "${eos_tag}" | \
    ${__cmd_prefix} character_squeezer ${__glob_opts} -1 \
    -d ${HUNSPELL_DICT}  | \
    ${SOCMEDIA_TTAGGER_DIR}/bin/tree-tagger -quiet -token -lemma -no-unknown \
    -cap-heuristics -hyphen-heuristics \
    -eos-tag "${eos_tag}" -lex "${SOCMEDIA_LSRC}/dict/special_tokens.lex" \
    "${SOCMEDIA_TTAGGER_DIR}/german-par-linux-3.2-utf8.bin" | \
    ${__cmd_prefix} noise_restorer
