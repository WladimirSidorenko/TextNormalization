#!/usr/bin/env python2.7
# -*- coding: utf-8; -*-

##################################################################
# Libraries
import os
import sys

from replacements import Memory
from ld.lingmap import lmap
from ld.p2p import P2P
from alt_argparse import argparser
from alt_fio import AltFileInput, AltFileOutput

##################################################################
# Variables
memory = Memory()

##################################################################
# Custom Methods
def print_mem():
    """Output and erase memory information if it is not empty."""
    if not memory.is_empty():
        foutput.fprint(unicode(memory))
        memory.forget_all()

##################################################################
# Processing Arguments
# note: some options are already set up by alt_argparser
argparser.description="Replace slang expressions with their normalized forms."
argparser.add_argument("-c", "--esc-char", help = """escape character which should
precede lines with meta-information""", nargs = 1, type = str, \
                           default = os.environ.get("SOCMEDIA_ESC_CHAR", ""))
argparser.add_rule_file_argument("-m", "--map-file", \
                                     help="file from which phrase mappings should be loaded", \
                                     file = "{SOCMEDIA_ROOT}/lingsrc/slang_normalizer/phrase2phrase.map")
args = argparser.parse_args()

##################################################################
# Main Body
esc_char = args.esc_char
skip_line = args.skip_line
SLANG_MAP = lmap.Map(args.map_file)

foutput   = AltFileOutput(encoding = args.encoding, \
                              flush = args.flush)
finput    = AltFileInput(*args.files, \
                              print_func = foutput.fprint, \
                              errors = 'replace')
skip_line = args.skip_line

for line in finput:
    # print empty and skip lines unchanged
    if line == skip_line or not line:
        # check if memory is empty and print it otherwise
        print_mem()
        foutput.fprint(line)
    # check if current line contains meta information
    elif line[0] == esc_char:
        # check if this meta info line represents information about
        # replacements made
        if not memory.parse(line):
            # if it's other meta info -- simply print it
            foutput.fprint(line)
    # otherwise, line is a normal line and its slang expressions should be
    # restored and information about replacements should be updated accordingly
    else:
        line = SLANG_MAP.replace(line, memory)
        # print updated memory
        print_mem()
        # print replaced line
        foutput.fprint(line)

print_mem()
