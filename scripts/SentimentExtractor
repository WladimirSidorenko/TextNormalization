#!/usr/bin/env bash
# -*- mode: shell-script; -*-
set -e -o pipefail

##################################################################
# Constants and Variables
# create temporary file for storing annotation
CONLL_FILE="$(mktemp -p ${SOCMEDIA_LINGTMP} conll_output.XXXXXX)"
ANNO_FILE="$(mktemp -p ${SOCMEDIA_LINGTMP} anno_output.XXXXXX)"
# delete temporary file on error or exit
trap 'rm -f ${CONLL_FILE} ${ANNO_FILE}' ERR EXIT

# default Parser
PARSER_CMD=TextParser
PARSED_INPUT=0
# options for Parser
PARSER_OPTS=
# flag indicating whether input is preprocessed
PREPROCESSED=0
# converter of parser output to features
FEAT_CONVERTER_CMD=
# default sentiment classificator
SENTIMENT_CLASSIFIER=crf
SENTIMENT_CLASSIFIER_OPTS=
SENTIMENT_CLASSIFIER_CMD=
# default classificator model used for sentiment analysis
SENTIMENT_CLASSIFIER_MODEL=

# CMD_PREFIX will be either empty or eval, depending on whether
# GLOBAL_OPTS were passed
CMD_PREFIX=
# GLOBAL_OPTS are -f|--flush and -s|--skip-line
GLOBAL_OPTS=

##################################################################
# Methods
usage() {
    local name="$(basename $0)"
    cat <<EOF >&2
DESCRIPTION:
Extract sentiment relations from input text.

USAGE:
${name} [OPTIONS] [FILE(s)]

OPTIONS:
-h,--help    print this screen and exit
-c,--crf     use CRF classifier (currently the default)
-f,--flush   flush output (be cautious, since neither TreeTagger nor MateParser
             support flushing, this option will only affect preceding
             modules but won't have any effect on the whole pipeline
             so far)
--feature-converter=  script for converting CONLL format to format
             appropriate for ML classifier (conll2crf is used by default)
-m,--model   pre-trained model which should be passed to the classifier
-p,--parameter   additional parameters for classifier model
--parsed     input is parsed
--preprocessed   input is parsed and features are extracted (in that case output
             has the form: reference tag (implies -p -r), automatic tag, list
             of features)
-t,--tagged-input    don't perform PoS tagging on input text
-s,--skip-line LINE  line which should output unchanged

EOF
    exit ${1:-1}
}

dummy_parser() {
    gawk '
    BEGIN {
        flushflag = 0
        for (i = 1; i < ARGC; ++i) {
            if (ARGV[i] ~ /^-f$/ || ARGV[i] ~ /^--flush$/) {
               flushflag = 1
            } else if ((ARGV[i] ~ /^-s$/ || ARGV[i] ~ /^--skip-line$/) && i < (ARGC - 1)) {
                ARGV[i++] = ""
            } else if (ARGV[i] ~ /^-s/ || ARGV[i] ~ /^--skip-line/) {
            } else if (ARGV[i] == "--") {
                ARGV[i] = ""
                break
            } else if (ARGV[i] ~ /^-/) {
	        printf("Unknown option \x27%s\x27. Type --help to see usage.", ARGV[i]) > "/dev/stderr"
	        exit 1
            } else {
                break
            }
            ARGV[i] = ""
        }
    }

    1 {
        print
        if (flushflag)
            fflush()
    }' $@
}

##################################################################
# Arguments
while test $# -gt 0; do
    case $1 in
	-h|--help)
	    usage 0;;
	-c|--crf)
	    # currently ignored, since it is used by default
	    ;;
	-f|--flush)
	    GLOBAL_OPTS="${GLOBAL_OPTS} ${1}";;
	-m|--model)
	    if test $# -lt 2; then
		echo '-m,--model requires an argument.' >&2
		exit 1
	    fi
	    SENTIMENT_CLASSIFIER_MODEL="${2}"
	    shift;;
	-m*)
	    SENTIMENT_CLASSIFIER_MODEL="${1#-m}";;
	--model=*)
	    SENTIMENT_CLASSIFIER_MODEL="${1#--model=}";;
	--feature-converter=*)
	    FEAT_CONVERTER_CMD="${1#*=}";;
	-p|--parameter)
	    if test $# -lt 2; then
		echo '-p,--parameter requires an argument.' >&2
		exit 1
	    fi
	    SENTIMENT_CLASSIFIER_OPTS=" ${SENTIMENT_CLASSIFIER_OPTS} ${2}"
	    shift;;
	-p*)
	    SENTIMENT_CLASSIFIER_OPTS="${SENTIMENT_CLASSIFIER_OPTS} ${1#-p}";;
	--parameter=*)
	    SENTIMENT_CLASSIFIER_OPTS="${SENTIMENT_CLASSIFIER_OPTS} ${1#*=}";;
	--parsed)
	    PARSED_INPUT=1;;
	--preprocessed)
	    PREPROCESSED=1
	    SENTIMENT_CLASSIFIER_OPTS="${SENTIMENT_CLASSIFIER_OPTS} -r";;
	-s|--skip-line)
	    if test $# -lt 2; then
		echo '-s,--skip-line requires an argument.' >&2
		exit 1
	    fi
	    GLOBAL_OPTS="${GLOBAL_OPTS} ${1} '${2}'"
	    # need `eval' to provide correct parsing of arguments
	    CMD_PRFX='eval'
	    shift;;
	-s*|--skip-line=*)
	    GLOBAL_OPTS="${GLOBAL_OPTS} '${1}'"
	    CMD_PRFX='eval';;
	-t|--tagged-input)
	    PARSER_OPTS="${PARSER_OPTS} $1";;
	--)
	    shift
	    break;;
	-)
	    break;;
	-*)
	    echo "Unrecognized option '$1'. Type --help to see usage." >&2
	    exit 2;;
	*)
	    break;
    esac
    shift
done

# determine the right parser command
if test ${PARSED_INPUT} -eq 1 -o ${PREPROCESSED} -eq 1; then
    PARSER_CMD="dummy_parser ${GLOBAL_OPTS}"
else
    PARSER_CMD="${PARSER_CMD} ${PARSER_OPTS} ${GLOBAL_OPTS}"
fi

# determine default feature converter
if test -z "${FEAT_CONVERTER_CMD}"; then
    # if no feature converter was specified, apply the default ones
    # for that classifiers
    case "${SENTIMENT_CLASSIFIER}" in
	crf|CRF)
	    FEAT_CONVERTER_CMD=conll2crf;;
	*)
	    echo "No appropriate default feature converter\
 for sentiment classifier '${SENTIMENT_CLASSIFIER}' found." >&2
	    exit 2;;
    esac
fi

# determine default classifier model
if test -z "${SENTIMENT_CLASSIFIER_MODEL}"; then
    case "${SENTIMENT_CLASSIFIER}" in
	crf|CRF)
	    SENTIMENT_CLASSIFIER_MODEL="${SOCMEDIA_LINGTMP}/sentiment/sentiment.crf";;
	*)
	    echo "No appropriate default feature converter \
 for sentiment classifier '${SENTIMENT_CLASSIFIER}' found." >&2
	    exit 3;;
    esac
fi

# determine appropriate sentiment classifier command
case "${SENTIMENT_CLASSIFIER}" in
    crf|CRF)
	SENTIMENT_CLASSIFIER_CMD="crfsuite tag -m ${SENTIMENT_CLASSIFIER_MODEL}";;
    *)
	echo "Unknown sentiment classifier: '${SENTIMENT_CLASSIFIER}'" >&2
	exit 4;;
esac

# get correct sentiment classifier
SENTIMENT_CLASSIFIER_CMD="${SENTIMENT_CLASSIFIER_CMD} ${SENTIMENT_CLASSIFIER_OPTS}"

##################################################################
# Main Pipeline
# Feed input data to parser but temporarily re-direct meta information
# to another file merging both streams at the end
${CMD_PRFX} ${PARSER_CMD} $@ | \
    tee "${CONLL_FILE}" | \
{
    if test ${PREPROCESSED} -eq 0; then
	${CMD_PRFX} ${FEAT_CONVERTER_CMD} ${GLOBAL_OPTS}
    else
	# if input is already preprocessed, simply flush input to
	# output
	${CMD_PRFX} ${PARSER_CMD}
    fi;
} | \
    # SENTIMENT_CLASSIFIER_CMD is an external command, so it does not
    # support our GLOBAL OPTS
${SENTIMENT_CLASSIFIER_CMD} > "${ANNO_FILE}"

if test ${PREPROCESSED} -eq 0; then
    ${CMD_PRFX} join_annotation_conll --anno-file="${ANNO_FILE}" \
	--field-name=sentiment ${GLOBAL_OPTS} < "${CONLL_FILE}"
else
    join "${ANNO_FILE}" "${CONLL_FILE}"
fi
