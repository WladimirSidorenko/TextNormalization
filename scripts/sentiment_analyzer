#!/usr/bin/env bash
# -*- mode: shell-script; -*-
set -e -o pipefail

##################################################################
# Variables
__cmd_prefix=''
__glob_opts=''

##################################################################
# Functions
usage() {
    local name="$(basename $0)"
    cat <<EOF >&2
DESCRIPTION:
${name} performs POS tagging of input lines and assigns sentiment
classes along with their probabilities to single words of input.

USAGE:
${name} [OPTIONS] [FILE(s)]

OPTIONS:
-h,--help    print this screen and exit
-f,--flush   flush output (be cautious, since TreeTagger doesn't
             support flushing, this option will only affect preceding
             modules but won't have any effect on the whole pipeline
             so far)
-s,--skip-line LINE    don't change input lines equal to LINE
EOF
exit ${1:-1}
}

__shquote (){
    __cmd=$(printf '%s\n' "$1" | sed "s|'|'\\\\\''|g")
    printf "%s\n" "'$__cmd'"
}

##################################################################
# Arguments
while test $# -gt 0; do
    case $1 in
	-h|--help)
	    usage 0;;
	-f|--flush)
	    __glob_opts="${__opts} ${1}";;
	-s|--skip-line)
	    if test $# -lt 2; then
		echo '-s,--skip-line requires an argument.' >&2
		exit 1
	    fi
	    __opts="${__opts} ${1} '${2}'"
	    # need `eval' to provide correct parsing of arguments
	    __cmd_prefix='eval'
	    shift;;
	-s*|--skip-line=*)
	    __glob_opts="${__opts} '${1}'"
	    __cmd_prefix='eval';;
	--)
	    shift
	    break;;
	-)
	    break;;
	-*)
	    echo "Unrecognized option '$1'. Type --help to see usage." >&2
	    exit 2;;
	*)
	    break;
    esac
    shift
done

##################################################################
# Main Pipeline
${__cmd_prefix} TextTagger --no-lang-filter ${__glob_opts} $@ | \
${__cmd_prefix} sentiment_tagger -n ${__glob_opts} | \
egrep '(neut|neg|pos)'
