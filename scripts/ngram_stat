#!/usr/bin/env python2.7

##################################################################
# Libraries
import re
import sys
import pickle
import string

from collections import Counter, defaultdict
from math import log

from alt_argparse import argparser
from alt_fio import AltFileInput, AltFileOutput

##################################################################
# Constants
PUNCT_RE = re.compile(r"(?:" + '|'.join([re.escape(c) for c in string.punctuation]) + ")")
SPACE_RE = re.compile(r"\s\s+")

def __adjust_key__(key):
    """Perform necessary operations on key string to match the stored form."""
    key = SPACE_RE.sub(" ", PUNCT_RE.sub(" ", key).strip()).lower()
    return key

##################################################################
# Class
class NGramStatDict(defaultdict):
    """Class holding statistics on n-grams."""

    def __init__(self, n = 1):
        "Initialize an NGramProb for holding n-grams of size N."
        self.N = n
        if self.N == 1:
            self.default_factory = lambda: 0
            self.incr = self.__incr_one__
        elif self.N > 1:
            self.default_factory = lambda: NGramStatDict(self.N - 1)
            self.incr = self.__incr_child__
        else:
            raise Exception("Invalid length of N-gram specified: {} (should be at leas 1)".format(n))

    def __incr_one__(self, key = []):
        """Increase counter for key by one."""
        key[0] = __adjust_key__(key[0])
        self[key[0]] += 1

    def __incr_child__(self, key = []):
        """Pass incr() to child element."""
        key[0] = __adjust_key__(key[0])
        self[key[0]].incr(key[1:])

##################################################################
# Variables and Constants
BOL = "<BOL>"
EOL = "<EOL>"

##################################################################
# Methods

##################################################################
# Processing Arguments
argparser.description="Utility for gathering n-gram statistics from corpus"
argparser.add_argument("-n", "--n-gram", \
                           help="length of n-grams to be collected", type = int, \
                           default = 1)
args = argparser.parse_args()

NGRAM_LEN = args.n_gram
# counter of n-grams
ngram_stat = NGramStatDict(NGRAM_LEN)
# probabilities of n-grams (will be populated later)
# ngram_prob = NGramDict(NGRAM_LEN)

##################################################################
# Main Body
foutput   = AltFileOutput(encoding = args.encoding)
finput    = AltFileInput(*args.files, \
                              print_func = foutput.fprint, \
                              errors = "replace")
tokens   = []
tokenlen = 0
tknrange = 0

for line in finput:
    tokens = line.split()

    if NGRAM_LEN > 1:
        tokens.insert(0, BOL)
    tokens.append(EOL)
    tokenlen = len(tokens)

    if tokenlen < NGRAM_LEN:
        continue

    tknrange = tokenlen - NGRAM_LEN + 1
    for i in range(0, tknrange):
        ngram_stat.incr(tokens[i:i + NGRAM_LEN])

for k,v in ngram_stat.iteritems():
    print >> sys.stderr, k, v

# pickle.dump(prob_table, sys.stdout, pickle.HIGHEST_PROTOCOL)
