#!/usr/bin/env bash
# -*- mode: shell-script; -*-
set -e -o pipefail

##################################################################
# Variables
__cmd_prefix=''
__opts=''

eos_tag="$(cat ${SOCMEDIA_LSRC}/sentence_splitter/eos.tag)"

##################################################################
# Functions
usage() {
    local name="$(basename $0)"
    cat <<EOF >&2
DESCRIPTION:
${name} extracts sentiment expressions from given input text data.

USAGE:
${name} [OPTIONS] [FILE(s)]

OPTIONS:
-h,--help         print this screen and exit
-f,--flush        flush output
-s,--skip-line LINE    don't change input lines equal to LINE
EOF
exit ${1:-1}
}

__shquote (){
    __cmd=$(printf '%s\n' "$1" | sed "s|'|'\\\\\''|g")
    printf "%s\n" "'$__cmd'"
}

##################################################################
# Arguments
while test $# -gt 0; do
    case $1 in
	-h|--help)
	    usage 0;;
	-f|--flush)
	    __opts="${__opts} ${1}";;
	-s|--skip-line)
	    if test $# -lt 2; then
		echo '-s,--skip-line requires an argument.' >&2
		exit 1
	    fi
	    __opts="${__opts} ${1} '${2}'"
	    # need eval to provide correct parsing of arguments
	    __cmd_prefix='eval'
	    shift;;
	-s*|--skip-line=*)
	    __opts="${__opts} '${1}'"
	    __cmd_prefix='eval';;
	--)
	    shift
	    break;;
	-)
	    break;;
	-*)
	    echo "Unrecognized option '$1'. Type --help to see usage." >&2
	    exit 2;;
	*)
	    break;
    esac
    shift
done

##################################################################
# Main Pipeline
${__cmd_prefix} language_detector ${__opts} -q $@ | \
${__cmd_prefix} character_normalizer ${__opts} \
    -m "${SOCMEDIA_LSRC}/character_normalizer/char2char.map" | \
${__cmd_prefix} noise_cleaner ${__opts} -n \
    -m "${SOCMEDIA_LSRC}/noise_cleaner/noise_cleaner.p2p" | \
${__cmd_prefix} umlaut_restorer ${__opts} \
    -r "${SOCMEDIA_LSRC}/umlaut_restorer/misspelled_umlaut.re" \
    -m "${SOCMEDIA_LSRC}/umlaut_restorer/misspelled2umlaut.map" \
    -e "${SOCMEDIA_LSRC}/umlaut_restorer/umlaut_exceptions.dic" | \
${__cmd_prefix} slang_normalizer ${__opts} \
    -m "${SOCMEDIA_LSRC}/slang_normalizer/phrase2phrase.map" | \
${__cmd_prefix} sentence_splitter ${__opts} \
    -k "${SOCMEDIA_LSRC}/sentence_splitter/keep.re" \
    -d "${SOCMEDIA_LSRC}/sentence_splitter/divide.re" | \
${__cmd_prefix} tokenizer ${__opts} -t "${eos_tag}" | \
${__cmd_prefix} character_squeezer  ${__opts} -1 \
    -t ${SOCMEDIA_BIN}/lengthened_stat.pckl | \
${TAGGER} -quiet -token -lemma -no-unknown \
    -cap-heuristics -hyphen-heuristics \
    -eos-tag "${eos_tag}" -lex "${SOCMEDIA_LSRC}/dict/special_tokens.lex" \
    "${SOCMEDIA_BIN}/german-par-linux-3.2-utf8.bin"
