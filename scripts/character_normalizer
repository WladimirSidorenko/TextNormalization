#!/usr/bin/env python2.7
# -*- coding: utf-8; -*-

##################################################################
# Libraries
import argparse
import sys
import ld

##################################################################
# Processing Arguments
parser = argparse.ArgumentParser(description='Utility for replacing problematic Unicode characters with their equivalent.')
parser.add_argument('-f', '--flush', help='flush output', action='store_true')
parser.add_argument('-s', '--skip-line', help='line to be skipped during processing')
parser.add_argument('-m', '--map-file', help='file from which character mappings should be loaded', \
                        type = argparse.FileType(mode = 'r', bufsize = 0), required = True)
parser.add_argument('files', help='input files', nargs = '*', \
                        type = argparse.FileType(mode = 'r', bufsize = 0), \
                        default = [sys.stdin], metavar='file')
args = parser.parse_args()

##################################################################
# Main Body
flsh  = args.flush
skip_line = args.skip_line
CHAR_MAP = ld.Map(args.map_file)

for file in args.files:
    line = file.readline().decode('utf-8')

    while line:
        line = line.strip()

        if line != skip_line:
            line = CHAR_MAP.replace(line)

        print line.encode('utf-8')

        if flsh:
            sys.stdout.flush()

        line = file.readline().decode('utf-8')
