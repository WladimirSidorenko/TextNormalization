#!/bin/sh

##################################################################
# Functions
__normalize_dname() (
    echo "${@}" | gawk '
1{
sub(/[[:space:]]+$/, "")
sub(/^[[:space:]]+/, "")
sub(/\/+$/, "")
gsub(/\/\/+/, "/")
print
}'
)

__add2path() {
    local rec=false
    # if the 1-st argument of this function looks rather like a
    # directory add it to PATH
    local lpath=PATH
    local nargs=$#
    local dirlist

    while test $# -gt 0; do
	case "${1}" in
	    -r|--recursive)
		rec=true;;
	    *PATH)
		lpath="${1}";;	# specify lpath variable to which new
				# directory should be added if
				# different from standard PATH,
				# e.g. PYTHONPATH or AWKPATH
	    --)
		shift
		break;;
	    *)
		break;;
	esac
	shift
    done

    if test ! $# -eq 1; then
	echo "${FUNCNAME:-$0}: Wrong number of arguments - ${nargs}." >&2
	return 2
    elif test ! -d "${1}"; then
	echo "Directory '${1}' does not exist." >&2
	return 3
    elif ${rec}; then
	dirlist="$(find ${1} \( -name '.git' -o -name 'SVN' \) -prune -o -type d -print)"
    else
	dirlist="${1}"
    fi

    for d in ${dirlist}; do
	# indirect reference of a variable
	eval _path="\${${lpath}}"
	if test -z "${_path}"; then
	    eval ${lpath}="$(__normalize_dname ${d})"
	else
	    eval ${lpath}="$(__normalize_dname ${d}):${_path}"
	fi
    done
}

__squeeze() {
    # actually id-nodes should be checked instead of directory names
    gawk -v PATH="${@}" '
function register_dir(dir, fmt, storage_hash) {
  storage_hash[dir] = 1
  printf fmt, dir
}

BEGIN {
  cnt = split(PATH, dirlist, ":")
  if ( cnt ) {
    register_dir(dirlist[1], "%s", checklist)
  }

  for (i=2; i<= cnt; ++i ) {
    dir = dirlist[i]
    if ( (dir in checklist) && ( checklist[dir] || empty_dir_cnt++ ) )
      continue
    register_dir(dir, ":%s", checklist)
  }
  exit 0
}'
}

__usage() {
    cat >&2 <<'EOF'
DESCRIPTION:
Shell script used to setup environment for working with socmedia project.

USAGE:
note the whitespace between '.' and script name
. set_env [OPTIONs]

OPTIONS:
-h|--help	print this screen and exit
EOF
}

##################################################################
# Arguments
if test $# -gt 0; then
    declare -i rcode=0
    declare -i doexit=0
    case $1 in
	-h|--help)
             __usage
	     doexit=1;
             unset -f __usage;;
	--)
	    shift;;
	-*)
	    rcode=1
	    doexit=1;;
    esac

    # check if this cripts was sourced into shell or launched on its
    # own and exit appropriately if needed
    if test ${doexit} -eq 1; then
	case $0 in
	    *sh)
		return ${rcode};;
	    *)
		exit ${rcode};;
	esac
    fi
fi

##################################################################
# Variables
# set-up default values for system dependent variables
LANG=de_DE.UTF-8
LANG_LIST="${LANG} de_DE.utf-8 C.UTF-8"
HUNSPELL_DICT=de_CH

# adjustments to system dependent variables depending on system
case $(uname -s) in
    Linux)
	for l in ${LANG_LIST}; do
	    if locale -a 2>/dev/null | grep -q ${l}; then
		LANG=${l};
		break;
	    fi
	done;;

    Darwin)
    	HUNSPELL_DICT='de_DE';;

esac

# set-up system independent variables
LC_MESSAGES=C

SOCMEDIA_ROOT="${PWD}"
SOCMEDIA_BASE="$(basename -- ${SOCMEDIA_ROOT})"
SOCMEDIA_VERSION="${SOCMEDIA_BASE#socmedia-}"

SOCMEDIA_BIN="${SOCMEDIA_ROOT}/bin"
SOCMEDIA_TMP="${SOCMEDIA_ROOT}/tmp"
SOCMEDIA_LINGSRC="${SOCMEDIA_ROOT}/lingsrc"
SOCMEDIA_LINGBIN="${SOCMEDIA_ROOT}/lingbin"
SOCMEDIA_LINGTMP="${SOCMEDIA_ROOT}/lingtmp"
SOCMEDIA_SUBMODULES="${SOCMEDIA_ROOT}/submodules"
SOCMEDIA_TTAGGER_DIR="${SOCMEDIA_SUBMODULES}/TreeTagger"
SOCMEDIA_MPARSER_DIR="${SOCMEDIA_SUBMODULES}/MateParser"
SOCMEDIA_ALCHEMY_DIR="${SOCMEDIA_SUBMODULES}/alchemy-2"
# special character which is used to mark meta-information
SOCMEDIA_ESC_CHAR=''
# Variables to be exported
EXPORT_VARS="LANG LC_MESSAGES ${!SOCMEDIA_*} TAGGER HUNSPELL_DICT"

# PATH Directories
__add2path "${SOCMEDIA_ROOT}/scripts"
__add2path "${SOCMEDIA_ROOT}/tests/scripts"
__add2path "${SOCMEDIA_BIN}"
__add2path "${SOCMEDIA_ALCHEMY_DIR}/bin"
# PYTHONPATH Directories
__add2path PYTHONPATH "${SOCMEDIA_ROOT}/scripts/lib/python"
__add2path PYTHONPATH "${SOCMEDIA_ROOT}/tests/scripts/lib/python"

PATH="$(__squeeze ${PATH})"
PYTHONPATH="$(__squeeze ${PYTHONPATH})"

##################################################################
unset -f __normalize_dname __add2path __squeeze __usage
export ${EXPORT_VARS} PATH PYTHONPATH
