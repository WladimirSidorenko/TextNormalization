#!/bin/sh

##################################################################
# Functions
__normalize_dname() (
    echo "${@}" | awk '
1{
sub(/[[:space:]]+$/, "")
sub(/^[[:space:]]+/, "")
sub(/\/+$/, "")
gsub(/\/\/+/, "/")
print
}'
)

__add2path() {
    local rec=false
    local path=PATH		# expand PATH by default
    local nargs=$#
    local dirlist

    while test $# -gt 0; do
	case "${1}" in
	    -r|--recursive)
		rec=true;;
	    *PATH)
		path="${1}";;	# specify path variable to which new
				# directory should be added if
				# different from standard PATH,
				# e.g. PYTHONPATH
	    --)
		shift
		break;;
	    *)
		break;;
	esac
	shift
    done

    if test ! $# -eq 1; then
	echo " ${FUNCNAME:-$0}: Wrong number of arguments - ${nargs}." >&2
	return 2
    elif test ! -d "${1}"; then
	echo "No such directory: '${1}'" >&2
	return 3
    elif ${rec}; then
	dirlist="$(find ${1} \( -name '.git' -o -name 'SVN' \) -prune -o -type d -print)"
    else
	dirlist="${1}"
    fi

    for d in ${dirlist}; do
	_path="${!path}"
	if test -z "${_path}"; then
	    eval ${path}="$(__normalize_dname ${d})"
	else
	    eval ${path}="$(__normalize_dname ${d}):${_path}"
	fi
    done
}

__squeeze() {
    # actually id-nodes should be checked instead of directory names
    awk -v PATH="${@}" '
function register_dir(dir, fmt, storage_hash) {
  storage_hash[dir] = 1
  printf fmt, dir
}

BEGIN {
  cnt = split(PATH, dirlist, ":")
  if ( cnt ) {
    register_dir(dirlist[1], "%s", checklist)
  }

  for (i=2; i<= cnt; ++i ) {
    dir = dirlist[i]
    if ( (dir in checklist) && ( checklist[dir] || empty_dir_cnt++ ) )
      continue
    register_dir(dir, ":%s", checklist)
  }
  exit 0
}'
}

##################################################################
# Arguments check
__usage() {
    cat <<'EOF' >&2
DESCRIPTION:
Shell script used to setup environment for working with socmedia project.

USAGE:
note the whitespace between '.' and script name
. set_env [OPTIONs]

OPTIONS:
-h|--help	print this screen and exit
EOF
}

if test $# -gt 0; then
    rcode=1
    case $1 in
	-h|--help)
	    rcode=0;;
    esac
    __usage
    unset -f __usage
    return ${rcode}
fi

##################################################################
# Variables
case $(uname -s) in
Linux)
	LANG=C.UTF-8;;
*BSD)
	LANG=de_DE.UTF-8;;
esac
LC_MESSAGES=C

SOCMEDIA_ROOT="${PWD}"
SOCMEDIA_BASE="$(basename -- ${SOCMEDIA_ROOT})"
SOCMEDIA_VERSION="${SOCMEDIA_BASE#socmedia-}"

SOCMEDIA_LSRC="${SOCMEDIA_ROOT}/lingsrc"
SOCMEDIA_BIN="${SOCMEDIA_ROOT}/bin"
SOCMEDIA_EXTOOLS="${SOCMEDIA_ROOT}/ext"

# Variables to be exported
EXPORT_VARS='LANG LC_MESSAGES SOCMEDIA_ROOT SOCMEDIA_BASE
SOCMEDIA_VERSION SOCMEDIA_LSRC SOCMEDIA_BIN'

# PATH Directories
__add2path "${SOCMEDIA_ROOT}/scripts"
__add2path "${SOCMEDIA_ROOT}/tests/scripts"
__add2path "${SOCMEDIA_EXTOOLS}"
__add2path "${SOCMEDIA_BIN}"
__add2path PYTHONPATH "${SOCMEDIA_ROOT}/scripts/lib/python"
__add2path PYTHONPATH "${SOCMEDIA_ROOT}/tests/scripts/lib/python"

PATH="$(__squeeze ${PATH})"
PYTHONPATH="$(__squeeze ${PYTHONPATH})"

##################################################################
unset -f __normalize_dname __add2path __squeeze
export ${EXPORT_VARS} PATH PYTHONPATH
