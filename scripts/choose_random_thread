#!/usr/bin/env python2.7
# -*- coding: utf-8; -*-

##################################################################
# Libraries
import tokenizer
from conll import CONLL
from ld.edseg import EDSSegmenter
from ld.scopy import DefaultScopeFinder
from alt_argparse  import argparser
from alt_fio import AltFileInput, AltFileOutput

import random
import re
import os
import sys

##################################################################
# Constants and Variables
TOTAL_THREADS = 0
THREAD_HEADER = re.compile("^#\s*Total\s+replies\s*:\s*(\d+)", re.IGNORECASE)
COMMENT_RE = re.compile("^\s*#")
IGNORE_IDS = set()

##################################################################
# Methods

##################################################################
# Arguments
##################################################################
# Main Body
if __name__ == "__main__":
    argparser.description="""Script for randomly choosing threads from TSV file."""
    argparser.add_argument("-i", "--ignore-ids", help = """file containing ids of messages
which should be ignored""", type = str)
    argparser.add_argument("-n", "--num-threads", help = """number of threads to extract""",
                           type = int, default = 5)
    argparser.add_argument("-min", "--min-posts", help = """minimal number of posts in thread""",
                           type = int, default = 10)
    argparser.add_argument("-max", "--max-posts", help = """maximal number of posts in thread""",
                           type = int, default = 20)
    argv = argparser.parse_args()
    # initialize constants
    if argv.ignore_ids:
        with open(argv.ignore_ids) as ifile:
            for line in ifile:
                IGNORE_IDS.add(line.strip())
    N_THREADS = argv.num_threads
    MIN_POSTS = argv.min_posts
    MAX_POSTS = argv.max_posts

    foutput = AltFileOutput(encoding = argv.encoding, flush = argv.flush)
    finput = AltFileInput(*argv.files, encoding = argv.encoding, \
                           print_func = foutput.fprint)
    # read input
    thread_started = 1
    thread_lines = []
    threads = []
    fields = []

    for iline in finput:
        mobj = THREAD_HEADER.match(iline)
        if mobj:
            if thread_started:
                threads.append(thread_lines)
                thread_started = 0
                thread_lines = []
            if  MIN_POSTS <= int(mobj.group(1)) <= MAX_POSTS:
                thread_started = 1
        elif not iline:
            continue
        elif (not COMMENT_RE.match(iline)) and thread_started:
            fields = iline.split('\t')
            if len(fields) < 2 or fields[-1].lower() == "unknown" or fields[-2] in IGNORE_IDS:
                thread_started = 0
                thread_lines = []
                continue
            thread_lines.append(iline)

    if thread_started:
        threads.append(thread_lines)
        thread_started = 0
        thread_lines = []

    # sample and output the results
    samples = threads
    if N_THREADS < len(threads):
        samples = random.sample(threads, N_THREADS)

    for s in samples:
        foutput.fprint(u'\n'.join(s) + u'\n')
