#!/usr/bin/env python2.7

##################################################################
# Libraries
import sys
import re
from os import environ
from os.path import basename, splitext
from alt_argparse import argparser
from alt_fileinput import AltFileInput, AltFileOutput
from ld import skip_comments

##################################################################
# Constants
FIELD_DELIMITER    = '\t'
POLARITY_DELIMITER = '/'
FIELD_DELIMITER_RE = re.compile(FIELD_DELIMITER)
CLASS_MARKER   = re.compile(r'^##\s*!\s*CLASS\s*:\s*(\S.*)')

##################################################################
# Variables
word = tag = lemma = ''
fields = []
senticlass = dict()

##################################################################
# Functions
def read_class_file(ifile):
    """Read list of words of particular class with their probabilities.

    The type of the class (so far only positive or negative) for which the file
    is being read is determined in two ways. By default, it is the basename of
    the input file without its extension. But if somewhere in the file a
    comment of type `##! CLASS: ' occurs, the string token following this
    comment will be assumed, as class name.
    """
    # by default, the name of the class will be the name of the file, from
    # which the list is being read with its path and extension stripped off
    classname = splitext(basename(ifile.filename))[0]
    classmatch = None
    word = tag = ''
    weight = 0.0
    for line in ifile:
        classmatch = CLASS_MARKER.match(line)
        if classmatch:
            classname = classmatch.group(1)
            continue
        line = skip_comments(line)
        if line:
            # please note, that input line should contain exactly 3
            # tab-separated fields and word should already be lowercased
            word, tag, weight = FIELD_DELIMITER_RE.split(line)
            # We don't check if same (word, tag) pair appears twice. If it does
            # the latter encountered will overwrite the former
            senticlass[word, tag] = classname + POLARITY_DELIMITER + str(weight)
# file descriptor will be closed automatically at the end of for loop

##################################################################
# Arguments
argparser.description="""Utility for assigning sentiment classes and
probabilities to words."""
argparser.add_argument('-c', '--class-file', help="""file with a list
of words belonging to a particular class along with their probabilities""", \
                           action='append', default = [class_filename.format(**environ) \
                                                           for class_filename in \
                                                           ("{SOCMEDIA_DATA}/positive.txt", \
                                                                "{SOCMEDIA_DATA}/negative.txt")])
argparser.add_argument('-x', '--skip-xml', help='skip XML tags', \
                           action='store_true')
args = argparser.parse_args()

# establish input/output utilities
foutput = AltFileOutput(flush = args.flush)
finput  = AltFileInput(*args.files, skip_line = args.skip_line, \
                            skip_xml = args.skip_xml, \
                            print_func = foutput.fprint)
# read statistics from files and populate senticlass
for cfile in args.class_file:
    read_class_file(AltFileInput(cfile))

##################################################################
# Main
# care of encoding/decoding, as well as skipping lines and XML markup will be
# taken in finput and foutput internals
for line in finput:
    fields = FIELD_DELIMITER_RE.split(line)
    # skip inappropriately formatted lines
    if len(fields) < 3:
        foutput.fprint(line)
        continue
    # lowercase lemma, so that we could refer to it later without worrying
    # about case
    word, tag, lemma = fields[:3]
    lemma = lemma.lower()
    # re-instantiate line with updated lemma
    line = FIELD_DELIMITER.join([word, tag, lemma] + fields[3:])
    # check, if this lemma and tag are known to our sentiment vocabulary and
    # if it is, add known information to it
    if (lemma, tag) in senticlass:
        line += FIELD_DELIMITER + senticlass[(lemma, tag)]
    foutput.fprint(line)
