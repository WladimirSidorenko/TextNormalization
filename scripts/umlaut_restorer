#!/usr/bin/env python2.7
# -*- coding: utf-8; -*-

##################################################################
# Libraries
import warnings
import sys
import re
import ld
from alt_argparse import argparser

##################################################################
# Custom Variables, Classes, and Methods
class Umlaut:
    '''Class containing all relevant information regarding umlauts.'''
    UMLAUTS_UPPER = ["Ä", "Ö", "Ü"]
    UMLAUTS_LOWER = ["ä", "ö", "ü"]
    UMLAUTS = UMLAUTS_UPPER + UMLAUTS_LOWER
    UMLAUTS_RE = re.compile(('(?:' + '|'.join(UMLAUTS) + ')'), re.UNICODE)

    NWORD = 0
    LOWER = 1
    UPPER = 2

    def __initialize__(self):
        '''This class only has constants so far.'''
        pass


    def adjust_case(self, str1, str2):
        '''Adjust case of characters in str1 to those in str2.

        In case when str1 is longer than str2 the remaining characters
        in str1 will get the case of the last character in str2.'''
        ostring = ''
        case1 = case2 = case_diff = 0
        for (i, (c1, c2)) in enumerate(zip(str1, str2)):
            case1 = self.check_case(c1)
            case2 = self.check_case(c2)
            case_diff = case1 and case2 and (case1 != case2)
            # if cases aren't equal and both characters are letters, swap case
            # of the character from the first string
            if case_diff:
                c1 = c1.swapcase()
            ostring += c1
        # append the rest of the 1-st string to output and adjust case if
        # necessary
        i += 1                  # after i-th character comes (i+1)-th boundary
        if case_diff:
            ostring += str1[i:].swapcase()
        else:
            ostring += str1[i:]
        return ostring


    def check_case(self, char):
        '''Return case of input character.'''
        if char.islower():
            return self.LOWER
        elif char.isupper():
            return self.UPPER
        else:
            return self.NWORD


class UmlautRestorer(Umlaut):
    '''Class for restoration of misspelled umlauts.'''

    # all 3 arguments are supposed to be open file descriptors, which
    # will be closed at the end, if function argument close_fd is True
    # (the default).
    def __init__(self, misspelled_re_f, missp2correct_f, \
                           exceptions_f = None, close_fd = True):
        '''Create an instance on Umlaut class. '''
        self.misspelled_re = ld.load_regexps(misspelled_re_f, close_fd = close_fd)
        self.missp2correct_map = ld.Map(missp2correct_f, close_fd = close_fd)
        self.correct2missp_map = self.missp2correct_map.reverse(lowercase_key = True)
        self.exceptions    = UmlautExceptions(exceptions_f, close_fd = close_fd, \
                                                  reverse_map = self.correct2missp_map)


    def missp2correct(self, istring):
        '''Restore ae, oe, ue in input string to umlaut characters.

        Search for all occurrences of exceptional substrings where
        writings like "ae" etc. are legal and replace all in-between
        occurrences of "ae" and friends with corresponding correct
        umlaut characters from self.missp2correct_map.'''
        ostring = ''
        str_start = 0    # start character of istring
        # find all exceptional substring (lowercased version of string is used)
        except_spans = self.exceptions.re.finditer(istring.lower())
        # iterate over all exceptional spans
        for (except_start, except_end) in except_spans:
            if debug:
                print >> sys.stderr, 'Exception: ', istring[except_start:except_end].encode('utf-8')
            # restore umlauts before match
            ostring += self.__restore_(istring[str_start:except_start])
            # restore umlauts in matched exception (yes, sometimes we need it
            # too), e.g. in `aufzuerw<ae>rmen' --> `aufzuerw<ä>rmen'
            ostring += self.__restore_exception_(istring[except_start:except_end])
            # and assume that the istring starts with the end of the current
            # match
            str_start = except_end
        # restore umlauts in the rest of the input string
        ostring += self.__restore_(istring[str_start:])
        return ostring

    def correct2missp(self, istring):
        '''Replace all occurrences of umlauts Ä, Ö, Ü with AE, OE, UE.'''
        ostring = ''

        return ostring


    def __restore_(self, istring):
        '''Unconditionally replace misspelled umlauts.'''
        ostring = ''
        start = 0
        # find all occurrences of misspelled umlauts in ISTRING
        for (missp_start, missp_end) in self.misspelled_re.finditer(istring):
            ostring += istring[start:missp_start]
            if debug:
                print >> sys.stderr, istring[missp_start:missp_end].encode('utf-8')
            ostring += self.__restore_helper_(istring[missp_start:missp_end])
            start = missp_end
        ostring += istring[start:]
        return ostring


    def __restore_helper_(self, key):
        '''Yield proper replacement for given misspelled sequence.'''
        # look-up the key in replacement dictionary
        if key in self.missp2correct_map.map:
            return self.missp2correct_map.map[key]
        # the situation when the key is not present in replacement map
        # should never occur, but if it does - issue a warning and return
        # matched substring unmodified
        else:
            warnings.warn("No replacement found for '{:s}'.".format(key), \
                              warnings.RuntimeWarning)
            return key


    def __restore_exception_(self, istring):
        '''Replace misspelled umlauts.'''
        return self.exceptions.restore(istring)


class UmlautExceptions(Umlaut):
    '''Class of words where writings ae, oe, ue are legal.'''

    def __init__(self, exception_file = None, \
                     close_fd = True, reverse_map = ld.Map()):
        """Create an instance of UmlautExceptions."""
        self.missp2correct = {}
        self.re = ld.load_regexps(exception_file, close_fd = close_fd, \
                                  no_inner_groups = True, \
                                  istring_hook = (lambda istring: \
                                                      self.__read_exception_(istring, reverse_map)))

    def restore(self, istring):
        '''Restore any still valid umlauts in a spoiled exception.'''
        key = istring.lower()
        if key in self.missp2correct:
            return self.adjust_case(self.missp2correct[key], istring)
        return istring


    def __read_exception_(self, istring, reverse_map):
        '''Spoil umlauts in ISTRING and return original and spoiled str.'''
        # generating all possible spoiled variants, i.e. 2^(# of umlauts) would
        # be more robust, but in practice it will rather slow things down
        result = istring.lower()
        spoiled = reverse_map.sub(result) # replace any exisiting umlauts with
                                          # their spoiled variant
        if result != spoiled:
            self.missp2correct[spoiled] = istring
            return [result, spoiled]
        else:
            return [result]


##################################################################
# Processing Arguments
argparser.description='Utility for restoring characters AE, OE, UE to umlauts.'
argparser.add_file_argument('-r', '--re-file', \
                                help='file with regular expression matching misspelled sequence', \
                                required = True)
argparser.add_file_argument('-m', '--map-file', \
                                help='file with character mappings from misspelled to normal form', \
                                required = True)
argparser.add_file_argument('-e', '--exception-file', \
                           help='file from which character mappings are loaded')
args = argparser.parse_args()

##################################################################
# Main Body
debug     = False
flsh      = args.flush
skip_line = args.skip_line
umlaut_restorer = UmlautRestorer(misspelled_re_f = args.re_file, \
                                     missp2correct_f = args.map_file, \
                                     exceptions_f = args.exception_file)

for file in args.files:
    line = file.readline().decode('utf-8')

    while line:
        line = line.strip()

        if line != skip_line:
            line = umlaut_restorer.missp2correct(line)

        print line.encode('utf-8')
        if flsh:
            sys.stdout.flush()
        line = file.readline().decode('utf-8')
