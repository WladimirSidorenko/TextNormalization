#!/usr/bin/env python2.7
# -*- coding: utf-8; -*-

##################################################################
# Libraries
from ld import umlauts
from replacements import Memory
from alt_argparse  import argparser
from alt_fio import AltFileInput, AltFileOutput

import re
import os
import sys

##################################################################
# Variables
rule_dir = "{SOCMEDIA_ROOT}/lingsrc/umlaut_restorer/"
debug  = False
memory = Memory()

##################################################################
# Methods
def print_mem():
    """Output and erase memory information if it is not empty."""
    if not memory.is_empty():
        foutput.fprint(unicode(memory))
        memory.forget_all()

##################################################################
# Arguments
argparser.description="Script for restoring characters AE, OE, UE to umlauts."
argparser.add_argument("-c", "--esc-char", help = """escape character which should
precede lines with meta-information""", nargs = 1, type = str, \
                           default = os.environ.get("SOCMEDIA_ESC_CHAR", ""))
argparser.add_rule_file_argument("-r", "--re-file", \
                                     help="file with regular expression matching misspelled sequence", \
                                     dir = rule_dir, \
                                     file = "misspelled_umlaut.re")
argparser.add_rule_file_argument("-m", "--map-file", \
                                     help="file with character mappings from misspelled to normal form", \
                                     dir = rule_dir, \
                                     file = "misspelled2umlaut.map")
argparser.add_rule_file_argument("-x", "--exception-file", \
                                     help="file from which character mappings are loaded", \
                                     dir = rule_dir, \
                                     file = "umlaut_exceptions.dic")
args = argparser.parse_args()

##################################################################
# Main Body
esc_char = args.esc_char
skip_line = args.skip_line
umlaut_restorer = umlauts.UmlautRestorer(misspelled_re_f = args.re_file, \
                                             missp2correct_f = args.map_file, \
                                             exceptions_f = args.exception_file)
foutput   = AltFileOutput(encoding = args.encoding, \
                              flush = args.flush)
finput    = AltFileInput(*args.files, print_func = foutput.fprint)

for line in finput:
    # print empty and skip lines unchanged
    if line == skip_line or not line:
        # check if memory is empty and print it otherwise
        print_mem()
        foutput.fprint(line)
    # check if current line contains meta information
    elif line[0] == esc_char:
        # check if this meta info line represents information about
        # made replacements
        if not memory.parse(line):
            # if it's other meta info -- simply print it
            foutput.fprint(line)
    # otherwise, line is a normal line and its umlauts should be restored with
    # update of replacement information
    else:
        line = umlaut_restorer.missp2correct(line, memory)
        # print updated memory
        print_mem()
        # print replaced line
        foutput.fprint(line)
print_mem()
