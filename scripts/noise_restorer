#!/usr/bin/env python2.7
# -*- coding: utf-8; -*-

##################################################################
# Libraries
from alt_argparse import argparser
from alt_fio import AltFileInput, AltFileOutput
from ld.noise_restorer import NoiseRestorer, DEFAULT_NR_FILE
from tokenizer import EOS_TAG

import os
import re

##################################################################
# Constants
FIELDSEP = re.compile('\t')

##################################################################
# Arguments
argparser.description = """Script for restoring elements previously replaced
or removed by noise_cleaner."""
argparser.add_argument("-c", "--esc-char", help="""escape character which should
precede lines with meta-information""",
                       nargs=1, type=str,
                       default=os.environ.get("SOCMEDIA_ESC_CHAR", ""))
argparser.add_rule_file_argument(
    "-r", "--restore-file",
    help="file that specifies which replaced elements should be restored",
    file=DEFAULT_NR_FILE)
args = argparser.parse_args()


##################################################################
# Main
esc_char = args.esc_char
fields = []

# initialize an object for restoration
nrestorer = NoiseRestorer(args.restore_file)
# establish objects necessary for reading and writing data
foutput = AltFileOutput(encoding=args.encoding, flush=args.flush)
finput = AltFileInput(*args.files,
                      skip_line=args.skip_line,
                      print_func=foutput.fprint,
                      errors="replace")
meta_seen = False

# process input file
for line in finput:
    if not line or line == EOS_TAG:
        foutput.fprint(line)
    elif line[0] == esc_char:
        if not meta_seen:
            meta_seen = True
            nrestorer.clear()
        nrestorer.read_meta_line(line)
        foutput.fprint(line)
    else:
        line = nrestorer.restore(line)
        foutput.fprint(line)
        meta_seen = False
