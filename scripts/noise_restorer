#!/usr/bin/env python2.7
# -*- coding: utf-8; -*-

##################################################################
# Libraries
from alt_argparse import argparser
from alt_fio import AltFileInput, AltFileOutput
from ld.noise_restorer import NoiseRestorer, DEFAULT_NR_FILE
from tokenizer import EOS_TAG

import os
import re
import sys

##################################################################
# Constants

##################################################################
# Arguments
argparser.description="""Script for restoring elements previously replaced
or removed by noise_cleaner."""
argparser.add_argument("-c", "--esc-char", help = """escape character which should
precede lines with meta-information""", nargs = 1, type = str, \
                           default = os.environ.get("SOCMEDIA_ESC_CHAR", ""))
argparser.add_rule_file_argument("-r", "--restore-list-file", \
                                     help = "file from which normalization rules should be loaded", \
                                     file = DEFAULT_NR_FILE)
args = argparser.parse_args()

##################################################################
# Main
esc_char = args.esc_char
nrestorer = NoiseRestorer(args.restore_list_file)

# establish necessary objects
foutput   = AltFileOutput(encoding = args.encoding, \
                              flush = args.flush)
finput    = AltFileInput(*args.files, \
                              skip_xml   = False, \
                              skip_line  = args.skip_line, \
                              print_func = foutput.fprint, \
                              errors = "replace")

# process input file
for line in finput:
    if not line:
        foutput.fprint(line)
    elif line == :
    elif line[0] == esc_char:
        pass
    else:
        line = nrestorer.replace(line)
        foutput.fprint(line)
