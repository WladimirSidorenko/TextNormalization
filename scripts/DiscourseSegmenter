#!/usr/bin/env python2.7
# -*- coding: utf-8; -*-

##################################################################
# Libraries
import tokenizer
from conll import CONLL
from ld.edseg import EDSSegmenter
from ld.scopy import DefaultScopeFinder
from alt_argparse  import argparser
from alt_fio import AltFileInput, AltFileOutput

import re
import os
import sys

##################################################################
# Constants and Variables

# My name is Gump, Forrest Gump.  People call me Forrest Gump.
Forrest = CONLL()
Segmenter = EDSSegmenter()
DSF = DefaultScopeFinder()
output_scope = True
foutput = None
scope_obj = None

##################################################################
# Methods
def output_forrest():
    """Split sentence in elementary discourse units and output it."""
    global Forrest
    if Forrest.is_empty():
        return
    else:
        foutput.fprint(unicode(Forrest))
        sds_list = [Segmenter.segment(sent) for sent in Forrest]
        for sds in sds_list:
            sds.pretty_print()
        if output_scope:
            DSF.find(Forrest, sds_list)
            DSF.pretty_print(a_encoding = "UTF-8")
        Forrest.clear()

##################################################################
# Arguments
argparser.description="Script for segmenting sentences into elementary discourse units."
argparser.add_argument("-c", "--esc-char", help = """escape character which should
precede lines with meta-information, these lines won't be processed""", nargs = 1, \
                           type = str, default = os.environ.get("SOCMEDIA_ESC_CHAR", ""))
argparser.add_argument("-t", "--eos-tag", help = """tag for marking sentence boundary""", \
                           default = tokenizer.EOS_TAG)
argparser.add_argument("--only-segmentation", help = """output only discourse segments
along with parsed sentences but don't print information about connector scopus""", \
                           action = "store_true")
args = argparser.parse_args()

##################################################################
# Main Body
ESC_CHAR = args.esc_char
EOS_TAG = args.eos_tag
skip_line = args.skip_line
istart = True
output_scope = not args.only_segmentation

foutput = AltFileOutput(encoding = args.encoding, flush = args.flush)
finput = AltFileInput(*args.files, encoding = args.encoding, \
                           print_func = foutput.fprint)

for line in finput:
    # print empty and skip_lines unchanged
    if line == skip_line:
        # print collected sentences
        output_forrest()
        # output line
        foutput.fprint(line)
        # set sentence start flag to true
        istart = True
    elif line and line[0] == ESC_CHAR:
        if istart:
            # print collected sentences
            output_forrest()
            # remember the new line
            istart = False
        Forrest.add_line(line)
    # otherwise, append the line to the CONLL forrest
    else:
        Forrest.add_line(line)
        istart = True
# print collected sentences
output_forrest()
