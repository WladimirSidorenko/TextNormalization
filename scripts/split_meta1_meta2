#!/usr/bin/gawk -f

##################################################################
# Methods
function usage(progname, estatus) {
    printf("\
Separate meta information from one file in two separate files\n\
(places in the 1-st file where a corresponding block from the 2-nd file\n\
belongs to are marked with the REPLACEMENT marker; contiguous block of\n\
information in the 2-nd file are divided by a line containing DELIMITER).\n\
\n\
USAGE:\n\
split_meta1_meta2 -c CHAR [OPTIONS] [FILES]\n\
\n\
OPTIONS:\n\
-h|--help	print this screen and exit\n\
-f|--flush	flush print\n\
-c|--char=CHAR	character marking lines which should be put in the 1-st file (MANDATORY)\n\
-d|--delimiter=DELIMITER      delimiter for meta info chunks in the 2-nd file\n\
-r|--replacement=REPLACEMENT  placeholder in the 1-st file instead of which\n\
			      meta info chunk from the 2-nd file should be put\n\
-s|--skip-line=LINE  lines to be skipped by processing\n\
-t|--trg-file=TRGFILE  file to which meta information 1 should be printed\n\
", progname) > "/dev/stderr"
    exit_status = estatus
    exit estatus
}

function print_flush(iline) {
    print iline
    if (flushflag)
	fflush()
}

function get_short_arg(arg, c) {
    if (c >= ARGC) {
	printf("Option '%s' requires an argument.\
  Type --help to see usage.", arg) > "/dev/stderr"
	exit_status = 2
	exit exit_status
    }
    return ARGV[c]
}

function check_req_arg(val, argname) {
    if (! val) {
	printf("Mandatory argument `%s` not specified.\
  Type --help to see usage.\n", argname) > "/dev/stderr"
	exit_status = 3
	exit exit_status
    }
}

function print2file(fname, istring) {
    printf("%s\n", istring) > fname
}

##################################################################
# Arguments
BEGIN {
    FS = "\t"
    flushflag = 0
    exit_status = 0
    delimiter = ""
    replacement = ""
    charmark = ""
    skip = 0
    skip_line = ""
    trg_file = ""

    progname = ARGV[0]

    # parse options
    for (i = 1; i < ARGC; ++i) {
	if (ARGV[i] ~ /^-h$/ || ARGV[i] ~ /^--help/) {
	    usage(progname, 0)
	} else if (ARGV[i] ~ /^-f$/ || ARGV[i] ~ /^--flush$/) {
	    flushflag = 1
	} else if (ARGV[i] ~ /^-c$/) {
	    ARGV[i] = ""
	    charmark = get_short_arg("-c", ++i)
	} else if (match(ARGV[i], /^--character=(.*)/, tmp_arr)) {
	    charmark = tmp_arr[1]
	} else if (ARGV[i] ~ /^-d$/) {
	    ARGV[i] = ""
	    delimiter = get_short_arg("-d", ++i)
	} else if (match(ARGV[i], /^--delimiter=(.*)/, tmp_arr)) {
	    delimiter = tmp_arr[1]
	} else if (ARGV[i] ~ /^-r$/) {
	    ARGV[i] = ""
	    replacement = get_short_arg("-r", ++i)
	} else if (match(ARGV[i], /^--replacement=(.*)/, tmp_arr)) {
	    replacement = tmp_arr[1]
	} else if (ARGV[i] ~ /^-s$/) {
	    skip = 1
	    ARGV[i] = ""
	    skip_line = get_short_arg("-s", ++i)
	} else if (match(ARGV[i], /^--skip-line=(.*)/, tmp_arr)) {
	    skip = 1
	    skip_line = tmp_arr[1]
	} else if (ARGV[i] ~ /^-t$/) {
	    ARGV[i] = ""
	    trg_file = get_short_arg("-t", ++i)
	} else if (match(ARGV[i], /^--trg-file=(.*)/, tmp_arr)) {
	    if (tmp_arr[1] && tmp_arr[1] != "-")
		trg_file = tmp_arr[1]
	    else
		trg_file = "/dev/stdout"
	} else if (ARGV[i] == "--") {
	    ARGV[i] = ""
	    break
	} else if (ARGV[i] ~ /^-/) {
	    printf("Unknown option '%s'.  Type --help to see usage.", ARGV[i]) > "/dev/stderr"
	    exit_status = 1
	    exit exit_status
	} else {
	    break
	}
	ARGV[i] = ""
    }
    # sanity check on arguments
    check_req_arg(charmark, "-c")
    check_req_arg(trg_file, "-t")

    charmark = "^" charmark
    meta_block_started = 1
    print_started = 0
}

##################################################################
# Main
$0 ~ charmark {
    if (!meta_block_started && print_started) {
	print_flush(delimiter)
    }
    print2file(trg_file, $0)
    meta_block_started = 1
    next
}

1 {
    print_flush($0)
    print_started = 1
    if (meta_block_started) {
	print2file(trg_file, replacement)
	meta_block_started = 0
    }
}

END {
   if (!meta_block_started && print_started) {
	print_flush(delimiter)
    }
   close(trg_file)
}
